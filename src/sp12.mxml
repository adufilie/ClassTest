<?xml version="1.0" encoding="utf-8"?>
<!--
/*
Weave (Web-based Analysis and Visualization Environment)
Copyright (C) 2008-2011 University of Massachusetts Lowell

This file is a part of Weave.

Weave is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License, Version 3,
as published by the Free Software Foundation.

Weave is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<ui:DraggablePanel xmlns="weave.example.*" xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:ui="weave.ui.*"
				   implements="weave.api.ui.IVisTool, weave.api.ui.IVisToolWithSelectableAttributes">
	<mx:Canvas id="canvas" width="100%" height="100%" />
	<mx:Script>
		<![CDATA[
			import mx.controls.Alert;
			import mx.events.ResizeEvent;
			
			import weave.Weave;
			import weave.api.WeaveAPI;
			import weave.api.data.IAttributeColumn;
			import weave.api.data.IKeySet;
			import weave.api.data.IQualifiedKey;
			import weave.api.detectLinkableObjectChange;
			import weave.api.getCallbackCollection;
			import weave.api.newLinkableChild;
			import weave.api.registerLinkableChild;
			import weave.api.ui.IVisTool;
			import weave.compiler.StandardLib;
			import weave.core.LinkableDynamicObject;
			import weave.core.LinkableNumber;
			import weave.core.weave_internal;
			import weave.data.AttributeColumns.DynamicColumn;
			import weave.data.KeySets.KeySet;
			import weave.data.StatisticsCache;
			import weave.primitives.Bounds2D;
			import weave.primitives.ColorRamp;
			import weave.primitives.KDTree;
			import weave.utils.BitmapText;
			import weave.utils.BitmapUtils;
			import weave.utils.ColumnUtils;
			import weave.utils.EquationColumnLib;
			import weave.utils.PlotterUtils;
			
			public const xData:DynamicColumn = newLinkableChild(this,DynamicColumn);
			public const yData:DynamicColumn = newLinkableChild(this,DynamicColumn);
			public const cData:DynamicColumn = newLinkableChild(this,DynamicColumn);
			public const colorRamp:ColorRamp = newLinkableChild(this,ColorRamp);
			//public const marginLeft:LinkableNumber = newLinkableChild(this,LinkableNumber);
			private const marginLeft:Number = 25;
			private const marginRight:Number = 10;
			private const marginBottom:Number = 25;
			private const marginTop:Number = 10;
			
			private const numTicks:Number = 20;
			private const tickLength:Number = 10;
			
			private const X_AXIS:uint = 0;
			private const Y_AXIS:uint = 1;
			
			private var bitmap:Bitmap = new Bitmap(new BitmapData(500, 500, true));
			private var bitmapText:BitmapText = new BitmapText();
			
			private var dataBounds:Bounds2D = new Bounds2D();
			private var screenBounds:Bounds2D = new Bounds2D();
			private var tempPoint:Point = new Point();
			//private var probedKeys:Array = [];
			
			private var r:Number = 5;
			
			private const probeKeys:LinkableDynamicObject = registerLinkableChild(this, new LinkableDynamicObject(KeySet));
			
			private var kdTree:KDTree = new KDTree(2);
			
			private var _sizeChanged:Boolean = true;
			
			override protected function createChildren():void{
				super.createChildren();
				canvas.rawChildren.addChild(bitmap);
			}
			
			override protected function childrenCreated():void{
				super.childrenCreated();
				getCallbackCollection(this).addImmediateCallback(this, invalidateDisplayList);
				canvas.addEventListener(MouseEvent.MOUSE_MOVE,mouseMove);
				probeKeys.globalName = Weave.DEFAULT_PROBE_KEYSET;
				
				canvas.addEventListener(ResizeEvent.RESIZE,function(){
					_sizeChanged = true;
				});
			}
			
			public function getSelectableAttributeNames():Array{
				return ['x','y','color'];
			}
			
			public function getSelectableAttributes():Array{
				return [xData,yData,cData];
			}
			
			private function mouseMove(event:MouseEvent):void{
				//				tempPoint.x = event.localX;
				//				tempPoint.y = event.localY;
				//				tempPoint = canvas.globalToLocal(tempPoint);
				//				var mouseX:Number = tempPoint.x;
				//				var mouseY:Number = tempPoint.y;
				
				var mouseX:Number = event.localX;
				var mouseY:Number = event.localY;
				
				var keys:Array = ColumnUtils.getAllKeys([xData,yData,cData]);
				//(probeKeys.internalObject as KeySet).clearKeys();
				
				var tempBounds:Bounds2D = new Bounds2D();
				tempBounds.setCenteredRectangle(mouseX, mouseY, 10 ,10);
				screenBounds.projectCoordsTo(tempBounds, dataBounds);
				var probedKeys:Array = kdTree.queryRange(
					[tempBounds.getXNumericMin(), tempBounds.getYNumericMin()],
					[tempBounds.getXNumericMax(), tempBounds.getYNumericMax()]);
				
				var probedKeySet:KeySet = probeKeys.internalObject as KeySet;
				if(probedKeySet)
					probedKeySet.replaceKeys(probedKeys);
				
				//				for each(var key:IQualifiedKey in keys)
				//				{
				//					tempPoint.x = xData.getValueFromKey(key);
				//					tempPoint.y = yData.getValueFromKey(key);
				//					dataBounds.projectPointTo(tempPoint, screenBounds);
				//					var recordX:Number = tempPoint.x;
				//					var recordY:Number = tempPoint.y;
				//					var dx:Number = recordX - mouseX;
				//					var dy:Number = recordY - mouseY;
				//					
				//					trace('mouseX = '+mouseX+', recordX = '+recordX);
				//					trace('mouseY = '+mouseY+', recordY = '+recordY);
				//					
				//					
				//					if(dx*dx+dy*dy < r*r)
				//						probedKeys.push(key);
				//				}
				//				var probedKeySet:KeySet = probeKeys.internalObject as KeySet;//Weave.root.getObject(Weave.DEFAULT_PROBE_KEYSET) as KeySet;
				//				if(probedKeySet)
				//					probedKeySet.replaceKeys(probedKeys);
				invalidateDisplayList();
				
			}
			
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void{
				super.updateDisplayList.apply(this,arguments);
				
				
				var shouldDraw:Boolean = false;
				
				if(_sizeChanged){
					shouldDraw = true;
					_sizeChanged = false;
				}
				
				if(detectLinkableObjectChange(updateDisplayList,xData, yData, cData, probeKeys, colorRamp))
					shouldDraw = true;
				
				if(shouldDraw){
					
					var xMin:Number = WeaveAPI.StatisticsCache.getMin(xData);
					var xMax:Number = WeaveAPI.StatisticsCache.getMax(xData);
					var yMin:Number = WeaveAPI.StatisticsCache.getMin(yData);
					var yMax:Number = WeaveAPI.StatisticsCache.getMax(yData);
					
					dataBounds.setBounds(xMin, yMin, xMax, yMax);
					
					screenBounds.setXRange(marginLeft, canvas.width - marginRight);
					screenBounds.setYRange(canvas.height - marginBottom, marginTop);
					
					var keys:Array = ColumnUtils.getAllKeys([xData,yData,cData]);
					
					canvas.graphics.clear();
					canvas.graphics.lineStyle(1,0x000000);
					canvas.graphics.drawRect(marginLeft,marginTop,
						canvas.width - marginLeft - marginRight,
						canvas.height - marginTop - marginBottom
					);
					
					if(detectLinkableObjectChange(kdTree, xData, yData)){
						kdTree.clear();
						for each(var key:IQualifiedKey in keys)
						{
							var x:Number = xData.getValueFromKey(key);
							var y:Number = yData.getValueFromKey(key);
							
							kdTree.insert([x,y],key);
						}
					}
					for each(var key:IQualifiedKey in keys)
					{
						var x:Number = xData.getValueFromKey(key);
						var y:Number = yData.getValueFromKey(key);
						
						x = ColumnUtils.getNorm(xData,key);
						y = ColumnUtils.getNorm(yData,key);
						var c:Number = ColumnUtils.getNorm(cData,key);
						var cc:IAttributeColumn = (Weave.root.getObject(Weave.DEFAULT_COLOR_COLUMN) as IAttributeColumn);
						var color:Number = cc.getValueFromKey(key,Number);
						
						if(probeKeys)
							if((probeKeys.internalObject as KeySet).containsKey(key))
								color = 0xFF0000;
						
						var xScreen:Number = StandardLib.scale(x,0,1,marginLeft,canvas.width - marginRight);
						var yScreen:Number = StandardLib.scale(y,1,0,marginTop,canvas.height - marginBottom);
						
						if(isNaN(xScreen))
							xScreen = screenBounds.xMax + 5;
						if(isNaN(yScreen))
							yScreen = screenBounds.yMax + 5;
						
						canvas.graphics.beginFill(color);
						canvas.graphics.drawCircle(xScreen,yScreen,r);
					}
					
					bitmap.bitmapData.fillRect(bitmap.bitmapData.rect,0x00000000);
					PlotterUtils.setBitmapDataSize(bitmap,canvas.width, canvas.height);
					drawTickMarks(xData, X_AXIS);
					drawTickMarks(yData, Y_AXIS);
				}
			}
			// axis in {X_AXIS, Y_AXIS}
			private function drawTickMarks(column:DynamicColumn,axis:uint):void{
				var min:Number = WeaveAPI.StatisticsCache.getMin(column);
				var max:Number = WeaveAPI.StatisticsCache.getMax(column);
				var widthOrHeight:Number = axis == X_AXIS?canvas.width:canvas.height;
				var n:Number = numTicks * widthOrHeight / 500;
				var niceNumbers:Array = StandardLib.getNiceNumbersInRange(min,max,n);
				
				//draw ticks
				var x:Number, y:Number;
				var text:BitmapText = new BitmapText();
				
				for each(var tick:Number in niceNumbers){
					//					if(tick < min || tick > max)
					//						Alert.show(""+tick);
					// the above code shows a number, meaning niceNumbers
					// contains values not in the specified range,
					// therefore it must be checked here:
					if(tick > min && tick < max){
						if(axis == X_AXIS){
							x = StandardLib.scale(tick,min,max,marginLeft,canvas.width - marginRight);
							y = canvas.height - marginBottom;
							
							canvas.graphics.moveTo(x,y - tickLength/2);
							canvas.graphics.lineTo(x,y + tickLength/2);
							
							bitmapText.verticalAlign = BitmapText.VERTICAL_ALIGN_TOP;
							bitmapText.horizontalAlign = BitmapText.HORIZONTAL_ALIGN_CENTER;
							
							y += tickLength/2;
						}
						else if(axis == Y_AXIS){
							x = marginLeft;
							y = StandardLib.scale(tick,min,max, canvas.height - marginBottom, marginTop);
							
							canvas.graphics.moveTo(x - tickLength/2,y);
							canvas.graphics.lineTo(x + tickLength/2,y);
							
							bitmapText.verticalAlign = BitmapText.VERTICAL_ALIGN_MIDDLE;
							bitmapText.horizontalAlign = BitmapText.HORIZONTAL_ALIGN_RIGHT;
							
							x -= tickLength/2;
						}
						bitmapText.x = x;
						bitmapText.y = y;
						bitmapText.text = ""+tick;
						bitmapText.draw(bitmap.bitmapData);
					}
				}
			}
		]]>
	</mx:Script>
	<ui:ControlPanel>
		<mx:VBox label="Basic">
			<ui:DynamicColumnComponent visTool="{this}" label="X" dynamicObject="{xData}" />
			<ui:DynamicColumnComponent visTool="{this}" label="Y" dynamicObject="{yData}" />
			<ui:DynamicColumnComponent visTool="{this}" label="Color" dynamicObject="{cData}" />
		</mx:VBox>
	</ui:ControlPanel>
</ui:DraggablePanel>
