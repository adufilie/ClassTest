<?xml version="1.0" encoding="utf-8"?>
<ui:DraggablePanel xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:ui="weave.ui.*" layout="absolute" width="400" height="300" implements="weave.api.ui.IVisTool">
	<mx:Canvas height="100%" width="100%" id="canvas1"/>
	<mx:Script>
		<![CDATA[
			import mx.controls.Text;
			import mx.events.ResizeEvent;
			
			import weave.api.WeaveAPI;
			import weave.api.data.IQualifiedKey;
			import weave.api.getCallbackCollection;
			import weave.api.newLinkableChild;
			import weave.api.registerLinkableChild;
			import weave.api.ui.IVisTool;
			import weave.compiler.StandardLib;
			import weave.core.LinkableNumber;
			import weave.data.AttributeColumns.DynamicColumn;
			import weave.primitives.Bounds2D;
			import weave.utils.BitmapText;
			import weave.utils.BitmapUtils;
			import weave.utils.ColumnUtils;
			import weave.utils.PlotterUtils;
			
			public const xValues:DynamicColumn = newLinkableChild(this, DynamicColumn);
			public const yValues:DynamicColumn = newLinkableChild(this, DynamicColumn);
			public const colorValues:DynamicColumn = newLinkableChild(this, DynamicColumn);
			public const radius:LinkableNumber = registerLinkableChild(this, new LinkableNumber(5));
			public const leftMargin:LinkableNumber = registerLinkableChild(this, new LinkableNumber(25));
			public const bottomMargin:LinkableNumber = registerLinkableChild(this, new LinkableNumber(25));
			
			private var plotterBitmap:Bitmap = new Bitmap(new BitmapData(800, 800));
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				
				getCallbackCollection(this).addImmediateCallback(this, invalidateDisplayList);
				canvas1.rawChildren.addChild(plotterBitmap);
			}
			
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
			{
				super.updateDisplayList(unscaledWidth,unscaledHeight);
				
				var keys:Array = ColumnUtils.getAllKeys([xValues, yValues, colorValues]);
				
				canvas1.graphics.clear();
				
				var xMin:Number = WeaveAPI.StatisticsCache.getMin(xValues);
				var xMax:Number = WeaveAPI.StatisticsCache.getMax(xValues);
				var yMin:Number = WeaveAPI.StatisticsCache.getMin(yValues);
				var yMax:Number = WeaveAPI.StatisticsCache.getMax(yValues);
				
				var colorMax:Number = WeaveAPI.StatisticsCache.getMax(colorValues);
				var colorMin:Number = WeaveAPI.StatisticsCache.getMin(colorValues);
				
				var dataBounds:Bounds2D = new Bounds2D(xMin, yMin, xMax, yMax);
				var screenBounds:Bounds2D = new Bounds2D(0, canvas1.height, canvas1.width, 0);
				
				screenBounds.xMin += leftMargin.value;
				screenBounds.yMin -= bottomMargin.value;
				
				canvas1.graphics.lineStyle(1);
				canvas1.graphics.drawRect(screenBounds.getXNumericMin(), screenBounds.getYNumericMin(), screenBounds.getXCoverage(), screenBounds.getYCoverage());
				
				var projPoint:Point = new Point();
				
				var ticks:Array = StandardLib.getNiceNumbersInRange(dataBounds.getXNumericMin(), dataBounds.getXNumericMax(), 5);
				
				var reusablePoint:Point = new Point();
				
				var labelTextBitmap:BitmapText = new BitmapText();
				PlotterUtils.setBitmapDataSize(plotterBitmap, canvas1.width, canvas1.height);				
				plotterBitmap.bitmapData.fillRect(plotterBitmap.bitmapData.rect, 0x00000000);
				
				for each(var x:Number in ticks)
				{
					reusablePoint.x = x;
					reusablePoint.y = dataBounds.getYMin();
					dataBounds.projectPointTo(reusablePoint, screenBounds);
					
					labelTextBitmap.x = reusablePoint.x;
					labelTextBitmap.y = reusablePoint.y;
					labelTextBitmap.text = x.toString();
					labelTextBitmap.draw(plotterBitmap.bitmapData);
					
					canvas1.graphics.lineStyle(1);
					canvas1.graphics.moveTo(reusablePoint.x, reusablePoint.y - 5);
					canvas1.graphics.lineTo(reusablePoint.x, reusablePoint.y + 5);
				}
				
				ticks = StandardLib.getNiceNumbersInRange(dataBounds.getYNumericMin(), dataBounds.getXNumericMax(), 5);
				labelTextBitmap.horizontalAlign = BitmapText.HORIZONTAL_ALIGN_LEFT;
				for each(var y:Number in ticks)
				{
					reusablePoint.x = dataBounds.getXMin();
					reusablePoint.y = y;
					dataBounds.projectPointTo(reusablePoint, screenBounds);
					
					labelTextBitmap.x = reusablePoint.x;
					labelTextBitmap.y = reusablePoint.y;
					labelTextBitmap.text = y.toString();
					labelTextBitmap.draw(plotterBitmap.bitmapData);
					
					canvas1.graphics.lineStyle(1);
					canvas1.graphics.moveTo(reusablePoint.x - 5, reusablePoint.y);
					canvas1.graphics.lineTo(reusablePoint.x + 5, reusablePoint.y);
				}
				
				for each( var key:IQualifiedKey in keys )
				{
					var x:Number = xValues.getValueFromKey(key, Number);
					var y:Number = yValues.getValueFromKey(key, Number);
					var color:Number = colorValues.getValueFromKey(key, Number);
					
					projPoint.x = x;
					projPoint.y = y;
					
					dataBounds.projectPointTo(projPoint,screenBounds);
					
					canvas1.graphics.beginFill(((color - colorMin)/(colorMax - colorMin)) * 0xFFFFFF);	 
					canvas1.graphics.drawCircle(projPoint.x,projPoint.y,radius.value);		 
				}
				canvas1.graphics.endFill();
			}
			
		]]>
	</mx:Script>	
	<ui:ControlPanel>
		<mx:VBox label="First tab">
			<mx:Label text="Example control panel"/>
		</mx:VBox>
		<mx:VBox label="Second tab">
			<mx:Label text="Second tab of example control panel"/>
		</mx:VBox>
	</ui:ControlPanel>
</ui:DraggablePanel>