<?xml version="1.0" encoding="utf-8"?>
<!--
/*
Weave (Web-based Analysis and Visualization Environment)
Copyright (C) 2008-2011 University of Massachusetts Lowell

This file is a part of Weave.

Weave is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License, Version 3,
as published by the Free Software Foundation.

Weave is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<ui:DraggablePanel xmlns="weave.example.*" xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:ui="weave.ui.*"
				   implements="weave.api.ui.IVisTool">
	
		<mx:VBox width="100%" height="100%">
			<mx:Canvas width="100%" height="100%" id="canvas" mouseChildren="false"/>
			<mx:HSlider width="100%" id="hs" liveDragging="true" minimum="1" maximum="20" 
						showTrackHighlight="true" />
			<mx:Spacer>
				
			</mx:Spacer>
			
			
		</mx:VBox>
		
	<mx:Script>
		<![CDATA[
			import mx.utils.ColorUtil;
			
			import weave.Weave;
			import weave.api.WeaveAPI;
			import weave.api.data.IAttributeColumn;
			import weave.api.data.IQualifiedKey;
			import weave.api.getCallbackCollection;
			import weave.api.linkBindableProperty;
			import weave.api.newLinkableChild;
			import weave.api.registerLinkableChild;
			import weave.api.reportError;
			import weave.api.ui.IVisTool;
			import weave.compiler.StandardLib;
			import weave.core.LinkableNumber;
			import weave.data.AttributeColumns.DynamicColumn;
			import weave.primitives.Bounds2D;
			import weave.utils.ColumnUtils;
			
			WeaveAPI.registerImplementation(IVisTool, sp6);
			
			public const xData:DynamicColumn = newLinkableChild(this,DynamicColumn);
			public const yData:DynamicColumn = newLinkableChild(this,DynamicColumn);
			public const colorCol:IAttributeColumn = Weave.root.getObject(Weave.DEFAULT_COLOR_COLUMN) as IAttributeColumn;
			
			public const radius:LinkableNumber = registerLinkableChild(this,new LinkableNumber(5));
				
			override protected function childrenCreated():void{
				super.childrenCreated();
				getCallbackCollection(this).addImmediateCallback(this,invalidateDisplayList);
				linkBindableProperty(radius,hs,"value");
				
			}
			
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void{
				super.updateDisplayList.apply(this,arguments);	
				
				try
				{
					
					var keys:Array = ColumnUtils.getAllKeys([xData,yData,colorCol]);
					
					var xMin:Number = WeaveAPI.StatisticsCache.getMin(xData);
					var xMax:Number = WeaveAPI.StatisticsCache.getMax(xData);
					var yMin:Number = WeaveAPI.StatisticsCache.getMin(yData);
					var yMax:Number = WeaveAPI.StatisticsCache.getMax(yData);					
					
					var dataBounds:Bounds2D = new Bounds2D(xMin,yMin,xMax,yMax);
					var screenBounds:Bounds2D = new Bounds2D(0,unscaledHeight,unscaledWidth,0);
					
					var pt:Point = new Point();
					var col:Number;
					
					canvas.graphics.clear();
					
					for each(var key:IQualifiedKey in keys){
						pt.x= xData.getValueFromKey(key,Number);
						pt.y = yData.getValueFromKey(key,Number);					
						col = colorCol.getValueFromKey(key,Number);
							
						dataBounds.projectPointTo(pt,screenBounds);
						
						canvas.graphics.lineStyle(1,0,0.5);
						canvas.graphics.beginFill(col,1.0);
						canvas.graphics.drawCircle(pt.x,pt.y,radius.value);
						canvas.graphics.endFill();					
					}
				}
				catch (e:Error)
				{
					reportError(e);
				}
			}
			
		]]>
	</mx:Script>
	
</ui:DraggablePanel>
