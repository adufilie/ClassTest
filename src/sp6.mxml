<?xml version="1.0" encoding="utf-8"?>
<!--
/*
Weave (Web-based Analysis and Visualization Environment)
Copyright (C) 2008-2011 University of Massachusetts Lowell

This file is a part of Weave.

Weave is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License, Version 3,
as published by the Free Software Foundation.

Weave is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<ui:DraggablePanel xmlns="weave.example.*" xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:ui="weave.ui.*"
				   implements="weave.api.ui.IVisTool">
	<mx:VBox width="100%" height="100%">
		<mx:Canvas width="100%" height="100%" id="canvas" mouseChildren="false" clipContent="true" mouseMove="canvas_mouseMoveHandler(event)"/>
		<mx:HBox width="100%">
			<mx:Label text="Point Size:"/>
			<mx:HSlider width="100%" id="hs" liveDragging="true" minimum="1" maximum="20" 
						showTrackHighlight="true" />
		</mx:HBox>
		<mx:HBox width="100%">
			<mx:Label text="Tick Interval:"/>
			<mx:HSlider width="100%" id="ts" liveDragging="true" minimum="4" maximum="20" tickInterval="1"  
						showTrackHighlight="true" />
		</mx:HBox>
	</mx:VBox>
	<mx:Script>
		<![CDATA[
			import mx.controls.Text;
			import mx.utils.ColorUtil;
			import weave.Weave;
			import weave.api.WeaveAPI;
			import weave.api.data.IAttributeColumn;
			import weave.api.data.IQualifiedKey;
			import weave.api.detectLinkableObjectChange;
			import weave.api.getCallbackCollection;
			import weave.api.linkBindableProperty;
			import weave.api.newLinkableChild;
			import weave.api.registerLinkableChild;
			import weave.api.ui.IVisTool;
			import weave.compiler.StandardLib;
			import weave.core.LinkableBoolean;
			import weave.core.LinkableNumber;
			import weave.data.AttributeColumns.DynamicColumn;
			import weave.primitives.Bounds2D;
			import weave.utils.BitmapText;
			import weave.utils.ColumnUtils;
			
			public const xData:DynamicColumn = newLinkableChild(this,DynamicColumn);
			public const yData:DynamicColumn = newLinkableChild(this,DynamicColumn);
			public const colorCol:IAttributeColumn = Weave.root.getObject(Weave.DEFAULT_COLOR_COLUMN) as IAttributeColumn;
			public const leftMargin:LinkableNumber = registerLinkableChild(this,new LinkableNumber(5));
			public const rightMargin:LinkableNumber = registerLinkableChild(this,new LinkableNumber(5));
			public const topMargin:LinkableNumber = registerLinkableChild(this,new LinkableNumber(5));
			public const bottomMargin:LinkableNumber = registerLinkableChild(this,new LinkableNumber(5));
			public const radius:LinkableNumber = registerLinkableChild(this,new LinkableNumber(5));
			public const tickIntervals:LinkableNumber = registerLinkableChild(this,new LinkableNumber(5));
			private var dataHolder:Dictionary = new Dictionary();
			private function updateContainer():void{
				var xCount:Number = WeaveAPI.StatisticsCache.getCount(xData);
				if(xCount > 1){
					var xMean:Number = WeaveAPI.StatisticsCache.getMean(xData);
				}
				var yCount:Number = WeaveAPI.StatisticsCache.getCount(xData)
				var yMean:Number = WeaveAPI.StatisticsCache.getMean(yData);
			}
			override protected function childrenCreated():void{
				super.childrenCreated();
				getCallbackCollection(this).addImmediateCallback(this,invalidateDisplayList);
				getCallbackCollection(colorCol).addImmediateCallback(this,invalidateDisplayList);
				linkBindableProperty(radius,hs,"value");
				linkBindableProperty(tickIntervals,ts,"value");
				//canvas.rawChildren.addChild(bitMap);
			}
			private var bitMap:Bitmap = new Bitmap(new BitmapData(500,500,true));
			private var bitmapText:BitmapText = new BitmapText();
			private var screenBounds:Bounds2D = new Bounds2D();
			private var dataBounds:Bounds2D = new Bounds2D();
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void{
				super.updateDisplayList.apply(this,arguments);
				if(isNaN(radius.value)){
					//During close event radius.value becomes NaN 
					trace();
				}else{
					if(xData.keys.length >0 || yData.keys.length > 0){
						//Issues:
						//maximize event not updating properly - delays its updating
						// session history - updates delays
						/*  if(detectLinkableObjectChange(updateDisplayList,panelWidth)||
						detectLinkableObjectChange(updateDisplayList,panelHeight)||
						detectLinkableObjectChange(updateDisplayList,panelX)||
						detectLinkableObjectChange(updateDisplayList,panelY)||
						detectLinkableObjectChange(updateDisplayList,maximized)||
						detectLinkableObjectChange(updateDisplayList,radius)||
						detectLinkableObjectChange(updateDisplayList,tickIntervals) || closestKey)
						{  */
						var keys:Array = ColumnUtils.getAllKeys([xData,yData,colorCol]);
						var xMin:Number = WeaveAPI.StatisticsCache.getMin(xData);
						var xMax:Number = WeaveAPI.StatisticsCache.getMax(xData);
						var yMin:Number = WeaveAPI.StatisticsCache.getMin(yData);
						var yMax:Number = WeaveAPI.StatisticsCache.getMax(yData);
						dataBounds = new Bounds2D(xMin,yMin,xMax,yMax);
						screenBounds = new Bounds2D(0,this.canvas.height,this.canvas.width,0);
						screenBounds.xMin = leftMargin.value/100 * canvas.width;
						screenBounds.xMax = canvas.width - (rightMargin.value/100 * canvas.width);
						screenBounds.yMin = canvas.height - (bottomMargin.value/100 * canvas.height);
						screenBounds.yMax = topMargin.value/100 * canvas.height;
						canvas.graphics.clear();
						canvas.graphics.lineStyle(1,0,1);
						canvas.graphics.moveTo(screenBounds.xMin,screenBounds.yMin);
						canvas.graphics.lineTo(screenBounds.xMax,screenBounds.yMin);
						canvas.graphics.lineTo(screenBounds.xMax,screenBounds.yMax);
						canvas.graphics.lineTo(screenBounds.xMin,screenBounds.yMax);
						canvas.graphics.lineTo(screenBounds.xMin,screenBounds.yMin);
						drawTicks(screenBounds,dataBounds);
						var pt:Point = new Point();
						var col:Number;
						for each(var key:IQualifiedKey in keys){
							var xVal:Number = xData.getValueFromKey(key,Number);
							var yVal:Number =  yData.getValueFromKey(key,Number);
							pt.x= xVal;
							pt.y = yVal;
							col = colorCol.getValueFromKey(key,Number);
							dataBounds.projectPointTo(pt,screenBounds);
							canvas.graphics.lineStyle(1,0,0.5);
							if(closestKey == key && closestDist < 10){
								canvas.graphics.beginFill(0xff0000,1.0);
								probeLabel.x = mouseX;
								probeLabel.y = mouseY;
								probeLabel.text = "X:" + xVal + " || Y:" + yVal;
								canvas.addChild(probeLabel);
							}
							else{
								if( closestDist >= 10 ){
									if(probeLabel.parent == canvas ){
										canvas.removeChild(probeLabel);
									} 
								}
								canvas.graphics.beginFill(col,1.0);
							}
							canvas.graphics.drawCircle(pt.x,pt.y,radius.value);
							canvas.graphics.endFill();
						}
						//}
					}
				}
			}
			//[Bindable]
			//private var sliderIntervals:Number = 1;
			private function drawTicks(scrBounds:Bounds2D,dataBounds:Bounds2D):void{
				var xTicks:Array = StandardLib.getNiceNumbersInRange(dataBounds.xMin,dataBounds.xMax,int(tickIntervals.value));
				var yTicks:Array = StandardLib.getNiceNumbersInRange(dataBounds.yMin,dataBounds.yMax,int(tickIntervals.value));
				//sliderIntervals = xTicks.length;
				var tickPt:Point = new Point();
				tickPt.x = dataBounds.getXMin();
				tickPt.y = dataBounds.getYMin();
				for(var i:int = 1 ; i <= xTicks.length ; i ++){
					canvas.graphics.lineStyle(1,0,1);
					for(var j:int = 1 ; j <= 4;j ++){
						if(j==1){
							tickPt.x = xTicks[i];
							tickPt.y = dataBounds.getYMin();
						}
						if(j==2){
							tickPt.x = dataBounds.getXMin();
							tickPt.y = yTicks[i];
						}
						dataBounds.projectPointTo(tickPt,scrBounds);
						canvas.graphics.moveTo(tickPt.x,tickPt.y);
						if(j==1){
							canvas.graphics.lineTo(tickPt.x,tickPt.y - scrBounds.getYCoverage());
						}
						if(j==2){
							canvas.graphics.lineTo(tickPt.x + scrBounds.getXCoverage(),tickPt.y);
						}
					} 
				}
			}
			private var stagePt:Point = new Point();
			private var recordPt:Point = new Point();
			private var closestKey:IQualifiedKey;
			private var closestDist:Number = Infinity;
			private var probeLabel:Text = new Text();
			protected function canvas_mouseMoveHandler(event:MouseEvent):void
			{
				closestDist = Infinity;
				stagePt.x = event.stageX;
				stagePt.y = event.stageY;
				stagePt = canvas.globalToLocal(stagePt);
				var keys:Array = ColumnUtils.getAllKeys([xData,yData,colorCol]);
				for each( var key:IQualifiedKey in keys){
					var xColdata:Number = xData.getValueFromKey(key,Number);
					var yColdata:Number = yData.getValueFromKey(key,Number);
					recordPt.x = xColdata;
					recordPt.y = yColdata;
					dataBounds.projectPointTo(recordPt,screenBounds);
					var dist:Number = recordPt.subtract(stagePt).length;
					if(dist < closestDist){
						closestKey = key;
						closestDist = dist
					}
					else{
						//closestKey = null
					} 
					trace("closest",closestDist,closestKey.localName);;
					invalidateDisplayList();
				}
			}
		]]>
	</mx:Script>
</ui:DraggablePanel>