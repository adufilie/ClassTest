<?xml version="1.0" encoding="utf-8"?>
<!--
/*
Weave (Web-based Analysis and Visualization Environment)
Copyright (C) 2008-2011 University of Massachusetts Lowell

This file is a part of Weave.

Weave is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License, Version 3,
as published by the Free Software Foundation.

Weave is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<ui:DraggablePanel xmlns="weave.example.*" xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:ui="weave.ui.*"
				   implements="weave.api.ui.IVisTool">
	<mx:Canvas  id="can" width="100%" height="100%"/> 
	<mx:Script>
		<![CDATA[
			import weave.api.WeaveAPI;
			import weave.api.data.IAttributeColumn;
			import weave.api.data.IQualifiedKey;
			import weave.api.getCallbackCollection;
			import weave.api.newLinkableChild;
			import weave.api.registerLinkableChild;
			import weave.api.reportError;
			import weave.api.ui.IVisTool;
			import weave.compiler.StandardLib;
			import weave.core.LinkableHashMap;
			import weave.data.AttributeColumns.DynamicColumn;
			import weave.data.KeySets.NumericDataFilter;
			import weave.primitives.Bounds2D;
			import weave.utils.ColumnUtils;
			import weave.visualization.tools.SimpleVisTool;
			
			WeaveAPI.registerImplementation(IVisTool, sp7);
			
			/* obtaining the probed columns instead of using session state editor */
			public const variables:LinkableHashMap = registerLinkableChild(this, new LinkableHashMap(IAttributeColumn));
			/* titles of the columns (have to make sure that session state should have at least three columns for this
			code to work */
			public var mytitle:Array = ["x","y","color"];
			public var myColumns:Array = new Array();
			
			public var myKeys:Array;
			override protected function constructor():void
			{
				super.constructor();				
				var columns:Array = SimpleVisTool.getDefaultColumnsOfMostCommonKeyType();
				for (var i:int = 0; i < columns.length; i++)
				{
					myColumns[i] = variables.requestObjectCopy(mytitle[i], columns[i]);
				}
				
				myKeys = ColumnUtils.getAllKeys(myColumns);
			}
			

			override protected function childrenCreated():void
			{
				super.childrenCreated();
				//creates a corresponding CallbackCollection for a ILinkableObject
				getCallbackCollection(this).addImmediateCallback(this, invalidateDisplayList);
			}
			
			/* this function is called by validate display list after the render event */
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
			{
				//'arguments' parameter takes the arguments of the ovverided function(it is an array)
				super.updateDisplayList.apply(this,arguments);
				
				try
				{
				
					var drawingPt:Point = new Point();
					var minX:Number = WeaveAPI.StatisticsCache.getMin((myColumns[0] as IAttributeColumn));
					var maxX:Number = WeaveAPI.StatisticsCache.getMax((myColumns[0] as IAttributeColumn));
					var minY:Number = WeaveAPI.StatisticsCache.getMin((myColumns[1] as IAttributeColumn));
					var maxY:Number = WeaveAPI.StatisticsCache.getMax((myColumns[1] as IAttributeColumn));
					
					/* var minC:Number = WeaveAPI.StatisticsCache.getMin((myColumns[2] as IAttributeColumn));
					var maxC:Number = WeaveAPI.StatisticsCache.getMax((myColumns[2] as IAttributeColumn));
					 */
					can.graphics.clear();
					var dataBounds:Bounds2D = new Bounds2D(minX,minY,maxX,maxY);
					var screenBounds:Bounds2D = new Bounds2D(0,unscaledHeight,unscaledWidth,0);
					
					for each(var key:IQualifiedKey in myKeys)
					{
						var x:Number = (myColumns[0] as IAttributeColumn).getValueFromKey(key, Number);
						
						
						var y:Number = (myColumns[1] as IAttributeColumn).getValueFromKey(key, Number);
						
						var c:Number = (myColumns[2] as IAttributeColumn).getValueFromKey(key, Number);
						var cNorm:Number = ColumnUtils.getNorm((myColumns[2] as IAttributeColumn),key);
						//var cNorm:Number = StandardLib.normalize(c,minC,maxC);
						var color:Number = StandardLib.interpolateColor(cNorm, 0xff0000, 0x00ff00);
						
						drawingPt.x = x;
						drawingPt.y = y;
						
						dataBounds.projectPointTo(drawingPt,screenBounds);
						
						can.graphics.beginFill(color,1.0);
						can.graphics.drawRect(drawingPt.x, drawingPt.y, 10,10);
						can.graphics.endFill();
						
					}
				}
				catch (e:Error)
				{
					reportError(e);
				}
			}
			
		]]>
	</mx:Script>
	
</ui:DraggablePanel>
