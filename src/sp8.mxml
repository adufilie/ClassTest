<?xml version="1.0" encoding="utf-8"?>
<!--
/*
Weave (Web-based Analysis and Visualization Environment)
Copyright (C) 2008-2011 University of Massachusetts Lowell

This file is a part of Weave.

Weave is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License, Version 3,
as published by the Free Software Foundation.

Weave is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<!--ui:DraggablePanel xmlns="weave.example.*" xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:ui="weave.ui.*"
implements="weave.api.ui.IVisTool"-->
<ui:DraggablePanel xmlns="example.*" xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:ui="weave.ui.*"
				   implements="weave.api.ui.IVisTool">
	
	<!--mx:Canvas id="canvas" width="100%" height="100%" clipContent="true"/-->
	<mx:Canvas id="canvas" width="100%" height="100%"/>
	<mx:Script>
		<![CDATA[
			import weave.Weave;
			import weave.api.WeaveAPI;
			import weave.api.data.IAttributeColumn;
			import weave.api.data.IQualifiedKey;
			import weave.api.getCallbackCollection;
			import weave.api.newLinkableChild;
			import weave.api.registerLinkableChild;
			import weave.api.ui.IVisTool;
			import weave.compiler.StandardLib;
			import weave.core.LinkableNumber;
			import weave.data.AttributeColumns.DynamicColumn;
			import weave.primitives.Bounds2D;
			import weave.primitives.ColorRamp;
			import weave.utils.BitmapText;
			import weave.utils.ColumnUtils;
			WeaveAPI.registerImplementation(IVisTool, sp8);
			
			public const leftPercentMargin:LinkableNumber = registerLinkableChild(this, new LinkableNumber(20));
			public const rightPercentMargin:LinkableNumber = registerLinkableChild(this, new LinkableNumber(20));
			public const topPercentMargin:LinkableNumber = registerLinkableChild(this, new LinkableNumber(20));
			public const bottomPercentMargin:LinkableNumber = registerLinkableChild(this, new LinkableNumber(20));
			
			public const sizePercent:LinkableNumber = registerLinkableChild(this, new LinkableNumber(0.05));
			
			public const xColumn:DynamicColumn = newLinkableChild(this, DynamicColumn);
			public const yColumn:DynamicColumn = newLinkableChild(this, DynamicColumn);
			public const cColumn:DynamicColumn = newLinkableChild(this, DynamicColumn);
			private var cc:IAttributeColumn = (Weave.root.getObject(Weave.DEFAULT_COLOR_COLUMN) as IAttributeColumn);
			
			private var dataBounds:Bounds2D = new Bounds2D();
			private var screenBounds:Bounds2D = new Bounds2D();
			
			private function get xSizePercent():Number {return Math.max(2.5, sizePercent.value * screenBounds.getXCoverage());}
			private function get ySizePercent():Number {return Math.max(2.5, sizePercent.value * screenBounds.getYCoverage());}
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				
				getCallbackCollection(this).addImmediateCallback(this, invalidateDisplayList);
				cc.addImmediateCallback(this, invalidateDisplayList);
			}
			
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
			{
				super.updateDisplayList.apply(this, arguments); // Shortcut: using arguments
				
				var r:Number = 5;
				var keys:Array = ColumnUtils.getAllKeys([xColumn, yColumn, cColumn]);
				
				var xMin:Number = WeaveAPI.StatisticsCache.getMin(xColumn);
				var xMax:Number = WeaveAPI.StatisticsCache.getMax(xColumn);
				var yMin:Number = WeaveAPI.StatisticsCache.getMin(yColumn);
				var yMax:Number = WeaveAPI.StatisticsCache.getMax(yColumn);
				
				canvas.graphics.clear();
				
				dataBounds.setBounds(xMin, yMin, xMax, yMax);
				screenBounds.setBounds(0, canvas.height, canvas.width, 0);
				
				screenBounds.xMin += (canvas.width * leftPercentMargin.value) / 100;
				screenBounds.yMin -= (canvas.height * bottomPercentMargin.value) / 100;
				screenBounds.xMax -= (canvas.width * rightPercentMargin.value) / 100;
				screenBounds.yMax += (canvas.height * topPercentMargin.value) / 100;
				
				var point:Point = new Point();
				
				canvas.graphics.lineStyle(1);
				if (!isNaN(screenBounds.getXCoverage()) || !isNaN(screenBounds.getYCoverage())) // Fix error when closing tool
					canvas.graphics.drawRect(
						screenBounds.getXNumericMin(),
						screenBounds.getYNumericMin(),
						screenBounds.getXCoverage(),
						screenBounds.getYCoverage());
				
				var tempBounds:Bounds2D = new Bounds2D();
				// Left
				tempBounds.copyFrom(screenBounds);
				tempBounds.xMax = tempBounds.xMin;
				drawTicks(dataBounds.yMin, dataBounds.yMax, tempBounds, vertical);
				
				// Bottom
				tempBounds.copyFrom(screenBounds);
				tempBounds.yMax = tempBounds.yMin;
				drawTicks(dataBounds.xMin, dataBounds.xMax, tempBounds, horizontal);
				
				for each (var key:IQualifiedKey in keys)
				{
					var x:Number = xColumn.getValueFromKey(key, Number);
					var y:Number = yColumn.getValueFromKey(key, Number);
					
					var xNorm:Number = StandardLib.normalize(x, xMin, xMax);
					var yNorm:Number = StandardLib.normalize(y, yMin, yMax);					
					var cNorm:Number = ColumnUtils.getNorm(cColumn, key); // Inside the loop ==> Less efficient
					var color:Number = cc.getValueFromKey(key, Number);
					
					canvas.graphics.lineStyle(1, 0, 0.5);
					canvas.graphics.beginFill(color, 1.0);
					
					point.x = x;
					point.y = y;
					dataBounds.projectPointTo(point, screenBounds);
					canvas.graphics.drawCircle(point.x, point.y, r);
					canvas.graphics.endFill();
				}
			} 
			
			
			private var horizontal:uint = 0, vertical:uint = 1;
			private function drawTicks(tickMin:Number, tickMax:Number, screenBounds:Bounds2D, orientation:uint):void
			{			
				var norm:Bounds2D = new Bounds2D(tickMin, tickMin, tickMax, tickMax);
				var point:Point = new Point();
				var ticks:Array = StandardLib.getNiceNumbersInRange(tickMin, tickMax, 10);
				
				for each (var tick:Number in ticks)
				{
					// tick mark might be less and larger than tickMin and tickMax
					if (tick < tickMin || tick > tickMax) continue;
					
					point.x = tick;
					point.y = tick;
					norm.projectPointTo(point, screenBounds);
					
					if (orientation == horizontal)
					{
						canvas.graphics.moveTo(point.x, point.y - ySizePercent / 2);
						canvas.graphics.lineTo(point.x, point.y + ySizePercent / 2);
					} else if ((orientation == vertical))
					{
						canvas.graphics.moveTo(point.x - xSizePercent / 2, point.y);
						canvas.graphics.lineTo(point.x + xSizePercent / 2, point.y);
					}
				}
			}
		]]>
	</mx:Script>
	<ui:ControlPanel>
		<mx:VBox label="First tab">
			<mx:Label text="Example control panel"/>
		</mx:VBox>
		<mx:VBox>
			<mx:Label text="Second tab of example control panel"/>
		</mx:VBox>
	</ui:ControlPanel>
</ui:DraggablePanel>

